from abc import ABC, abstractmethod
import base64
import httpx
import os
from typing import List, Dict, Any, Optional

from open_notebook.models.base import BaseModel

class ImageToTextModel(BaseModel, ABC):
    """Abstract base class for image-to-text models."""

    @abstractmethod
    def generate_text_from_image(self, image_path: str, prompt: str, mime_type: str = "image/jpeg") -> str:
        """
        Generates text from an image.

        Args:
            image_path: Path to the local image file.
            prompt: The text prompt to guide the model.
            mime_type: The MIME type of the image (e.g., "image/jpeg", "image/png").

        Returns:
            The text generated by the model based on the image and prompt.
        """
        pass

class OpenrouterImageToTextModel(ImageToTextModel):
    """Image-to-text model using the Openrouter API."""

    def __init__(self, model_name: str, api_key: Optional[str] = None):
        super().__init__(model_name)
        self.api_key = api_key or os.environ.get("OPENROUTER_API_KEY")
        if not self.api_key:
            raise ValueError("OpenRouter API key not provided or found in environment variables.")
        self.api_url = "https://openrouter.ai/api/v1/chat/completions"

    def _encode_image_to_base64(self, image_path: str) -> str:
        try:
            with open(image_path, "rb") as image_file:
                return base64.b64encode(image_file.read()).decode('utf-8')
        except FileNotFoundError:
            raise ValueError(f"Image file not found at path: {image_path}")

    def generate_text_from_image(self, image_path: str, prompt: str, mime_type: str = "image/jpeg") -> str:
        if mime_type not in ["image/jpeg", "image/png", "image/webp"]:
            raise ValueError(f"Unsupported image MIME type: {mime_type}. Supported types are image/jpeg, image/png, image/webp.")

        base64_image = self._encode_image_to_base64(image_path)
        data_url = f"data:{mime_type};base64,{base64_image}"

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "model": self.model_name,
            "messages": [
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": data_url}}
                    ]
                }
            ]
        }

        try:
            with httpx.Client() as client:
                response = client.post(self.api_url, headers=headers, json=payload)
                response.raise_for_status()  # Raise an exception for bad status codes
            
            response_data = response.json()
            
            if response_data.get("choices") and len(response_data["choices"]) > 0:
                content = response_data["choices"][0].get("message", {}).get("content")
                if content:
                    return str(content)
            
            # Log or handle unexpected response structure
            error_message = f"Unexpected response structure or empty content from Openrouter: {response_data}"
            # Consider logging this error instead of raising immediately for all cases
            # logger.error(error_message) 
            return f"Error: {error_message}"

        except httpx.HTTPStatusError as e:
            # Handle HTTP errors (e.g., 4xx, 5xx)
            error_message = f"HTTP error occurred: {e.response.status_code} - {e.response.text}"
            # logger.error(error_message)
            return f"Error: {error_message}"
        except httpx.RequestError as e:
            # Handle other request errors (e.g., network issues)
            error_message = f"Request error occurred: {str(e)}"
            # logger.error(error_message)
            return f"Error: {error_message}"
        except Exception as e:
            # Catch any other unexpected errors
            error_message = f"An unexpected error occurred: {str(e)}"
            # logger.error(error_message)
            return f"Error: {error_message}"

# Example Usage (for testing, normally not here):
# if __name__ == '__main__':
#     # Ensure OPENROUTER_API_KEY is set in your environment
#     # Create a dummy image file (e.g., dummy.jpg) in the same directory
#     # with open("dummy.jpg", "wb") as f:
#     #     f.write(b'\x00') # Minimal dummy content
#
#     try:
#         # model = OpenrouterImageToTextModel(model_name="mistralai/pixtral-12b") # Replace with a valid model
#         model = OpenrouterImageToTextModel(model_name="microsoft/phi-3-vision-128k-instruct")
#         text_description = model.generate_text_from_image("dummy.jpg", "What is in this image?")
#         print(f"Generated text: {text_description}")
#     except Exception as e:
#         print(f"Error during example usage: {e}") 